[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "init_db",
        "kind": 2,
        "importPath": "tradingBot2",
        "description": "tradingBot2",
        "peekOfCode": "def init_db():\n    conn = sqlite3.connect(DB_PATH)\n    cursor = conn.cursor()\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS trades (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            timestamp TEXT,\n            signal TEXT,\n            reason TEXT,\n            stock_price REAL,",
        "detail": "tradingBot2",
        "documentation": {}
    },
    {
        "label": "save_trade",
        "kind": 2,
        "importPath": "tradingBot2",
        "description": "tradingBot2",
        "peekOfCode": "def save_trade(signal, reason, stock_price, cash, holdings):\n    conn = sqlite3.connect(DB_PATH)\n    cursor = conn.cursor()\n    timestamp = datetime.utcnow().isoformat()  # UTC timestamp\n    cursor.execute('''\n        INSERT INTO trades (timestamp, signal, reason, stock_price, cash, holdings)\n        VALUES (?, ?, ?, ?, ?, ?)\n    ''', (timestamp, signal, reason, stock_price, cash, holdings))\n    conn.commit()\n    conn.close()",
        "detail": "tradingBot2",
        "documentation": {}
    },
    {
        "label": "transform_data",
        "kind": 2,
        "importPath": "tradingBot2",
        "description": "tradingBot2",
        "peekOfCode": "def transform_data(json_data):\n    time_series = json_data.get(\"Time Series (1min)\", {})\n    if not time_series:\n        return pd.DataFrame()  # Return empty DataFrame if no data\n    records = []\n    for timestamp, values in time_series.items():\n        record = {\n            \"timestamp\": timestamp,\n            \"close\": float(values[\"4. close\"])\n        }",
        "detail": "tradingBot2",
        "documentation": {}
    },
    {
        "label": "process_data",
        "kind": 2,
        "importPath": "tradingBot2",
        "description": "tradingBot2",
        "peekOfCode": "def process_data():\n    global CASH, HOLDINGS\n    data = request.get_json()\n    if not data:\n        return jsonify({\"error\": \"Invalid data\"}), 400\n    df = transform_data(data)\n    if df.empty:\n        return jsonify({\"error\": \"No valid time-series data\"}), 400\n    # Calculate EMAs\n    df['short_ema'] = df['close'].ewm(span=12, adjust=False).mean()",
        "detail": "tradingBot2",
        "documentation": {}
    },
    {
        "label": "get_trades",
        "kind": 2,
        "importPath": "tradingBot2",
        "description": "tradingBot2",
        "peekOfCode": "def get_trades():\n    conn = sqlite3.connect(DB_PATH)\n    cursor = conn.cursor()\n    cursor.execute('SELECT * FROM trades ORDER BY timestamp DESC')\n    trades = cursor.fetchall()\n    conn.close()\n    return jsonify([\n        {\n            \"id\": t[0],\n            \"timestamp\": t[1],",
        "detail": "tradingBot2",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "tradingBot2",
        "description": "tradingBot2",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)  # Enable CORS to allow requests from ESP32\nDB_PATH = 'trades.db'\n# Simulation Variables\nCASH = 10000.00  # Starting cash balance\nHOLDINGS = 0  # Number of shares owned\n# Initialize SQLite Database\ndef init_db():\n    conn = sqlite3.connect(DB_PATH)\n    cursor = conn.cursor()",
        "detail": "tradingBot2",
        "documentation": {}
    },
    {
        "label": "DB_PATH",
        "kind": 5,
        "importPath": "tradingBot2",
        "description": "tradingBot2",
        "peekOfCode": "DB_PATH = 'trades.db'\n# Simulation Variables\nCASH = 10000.00  # Starting cash balance\nHOLDINGS = 0  # Number of shares owned\n# Initialize SQLite Database\ndef init_db():\n    conn = sqlite3.connect(DB_PATH)\n    cursor = conn.cursor()\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS trades (",
        "detail": "tradingBot2",
        "documentation": {}
    },
    {
        "label": "CASH",
        "kind": 5,
        "importPath": "tradingBot2",
        "description": "tradingBot2",
        "peekOfCode": "CASH = 10000.00  # Starting cash balance\nHOLDINGS = 0  # Number of shares owned\n# Initialize SQLite Database\ndef init_db():\n    conn = sqlite3.connect(DB_PATH)\n    cursor = conn.cursor()\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS trades (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            timestamp TEXT,",
        "detail": "tradingBot2",
        "documentation": {}
    },
    {
        "label": "HOLDINGS",
        "kind": 5,
        "importPath": "tradingBot2",
        "description": "tradingBot2",
        "peekOfCode": "HOLDINGS = 0  # Number of shares owned\n# Initialize SQLite Database\ndef init_db():\n    conn = sqlite3.connect(DB_PATH)\n    cursor = conn.cursor()\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS trades (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            timestamp TEXT,\n            signal TEXT,",
        "detail": "tradingBot2",
        "documentation": {}
    }
]